<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Yana Blog</title>
        <link>https://yanadev.github.io/react</link>
        <description>Yana Blog</description>
        <lastBuildDate>Sat, 23 Sep 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[React]]></title>
            <link>https://yanadev.github.io/react/react</link>
            <guid>https://yanadev.github.io/react/react</guid>
            <pubDate>Sat, 23 Sep 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[开发注意]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="开发注意">开发注意<a href="https://yanadev.github.io/react/react#%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F" class="hash-link" aria-label="开发注意的直接链接" title="开发注意的直接链接">​</a></h2>
<ol>
<li>单一职责（每个组件只做一件事，复杂了就需要拆分）</li>
<li>DRY 原则（可计算的到不要单独存储，尽量无状态，所需数据通过 props 获得）</li>
<li>约定：大写字母开头为自定义组件，小写 tag 是原生 DOM 节点</li>
<li>key 应该唯一，不使用随机值，使用 index 为 key 值，对性能没有优化（index 随机）</li>
<li>执行初始化函数的时候，使用 useEffect，依赖值为该函数名，确保在函数改变的时候才会重新执行 useEffect 中的方法</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="历史背景及特性">历史背景及特性<a href="https://yanadev.github.io/react/react#%E5%8E%86%E5%8F%B2%E8%83%8C%E6%99%AF%E5%8F%8A%E7%89%B9%E6%80%A7" class="hash-link" aria-label="历史背景及特性的直接链接" title="历史背景及特性的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="历史背景">历史背景<a href="https://yanadev.github.io/react/react#%E5%8E%86%E5%8F%B2%E8%83%8C%E6%99%AF" class="hash-link" aria-label="历史背景的直接链接" title="历史背景的直接链接">​</a></h3>
<ol>
<li>传统 UI 操作关注过多细节</li>
<li>应用状态分散，难以追踪、维护</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性">特性<a href="https://yanadev.github.io/react/react#%E7%89%B9%E6%80%A7" class="hash-link" aria-label="特性的直接链接" title="特性的直接链接">​</a></h3>
<ol>
<li>一个新概念：<strong>组件</strong></li>
<li>4 个必须的 API</li>
<li>单向数据流： <strong>flux 架构</strong></li>
<li>完善的错误提示</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="flux-架构单向数据流">flux 架构（单向数据流）<a href="https://yanadev.github.io/react/react#flux-%E6%9E%B6%E6%9E%84%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81" class="hash-link" aria-label="flux 架构（单向数据流）的直接链接" title="flux 架构（单向�数据流）的直接链接">​</a></h4>
<p><img decoding="async" loading="lazy" alt="image-20230908105023004" src="https://yanadev.github.io/assets/images/image-20230908105023004-8ae4cc679ada2de6a69915a5ed66b09c.png" width="1468" height="700" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="组件方式考虑-ui-的构建方式">组件方式考虑 UI 的构建方式<a href="https://yanadev.github.io/react/react#%E7%BB%84%E4%BB%B6%E6%96%B9%E5%BC%8F%E8%80%83%E8%99%91-ui-%E7%9A%84%E6%9E%84%E5%BB%BA%E6%96%B9%E5%BC%8F" class="hash-link" aria-label="组件方式考虑 UI 的构建方式的直接链接" title="组件方式考虑 UI 的构建方式的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="react-组件props--state--view">React 组件（<strong>props + state = view</strong>）<a href="https://yanadev.github.io/react/react#react-%E7%BB%84%E4%BB%B6props--state--view" class="hash-link" aria-label="react-组件props--state--view的直接链接" title="react-组件props--state--view的直接链接">​</a></h3>
<ol>
<li>一般不提供方法，而是某种状态机</li>
<li>可理解为纯函数（固定输入一定的到固定输出）</li>
<li>单向数据绑定</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="react-组件受控组件-vs-非受控组件">React 组件：受控组件 VS 非受控组件<a href="https://yanadev.github.io/react/react#react-%E7%BB%84%E4%BB%B6%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6-vs-%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" class="hash-link" aria-label="React 组件：受控组件 VS 非受控组件的直接链接" title="React 组件：受控组件 VS 非受控组件的直接链接">​</a></h4>
<p>受控：表单状态由使用者维护（外部 props ---- 受外部控制）</p>
<p>非受控：表单状态 DOM 自身维护（内部 state ----- 受内部控制）</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="组件开发原则">组件开发原则<a href="https://yanadev.github.io/react/react#%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E5%8E%9F%E5%88%99" class="hash-link" aria-label="组件开发原则的直接链接" title="组件开发原则的直接链接">​</a></h3>
<ol>
<li>单一职责（每个组件只做一件事，复杂了就需要拆分）</li>
<li>DRY 原则（可计算的到不要单独存储，尽量无状态，所需数据通过 props 获得）</li>
<li>约定：大写字母开头为自定义组件，小写 tag 是原生 DOM 节点</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="jsx-本质是动态创建组件的语法糖">JSX 本质是动态创建组件的语法糖<a href="https://yanadev.github.io/react/react#jsx-%E6%9C%AC%E8%B4%A8%E6%98%AF%E5%8A%A8%E6%80%81%E5%88%9B%E5%BB%BA%E7%BB%84%E4%BB%B6%E7%9A%84%E8%AF%AD%E6%B3%95%E7%B3%96" class="hash-link" aria-label="JSX 本质是动态创建组件的语法糖的直接链接" title="JSX 本质是动态创建组件的语法糖的直接链接">​</a></h2>
<ol>
<li>声明式创建界面的直观</li>
<li>代码动态创建界面的灵活</li>
<li>无需学习新的模板语言</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="生命周期及使用场景">生命周期及使用场景<a href="https://yanadev.github.io/react/react#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" class="hash-link" aria-label="生命周期及使用场景的直接链接" title="生命周期及使用场景的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="constructor-唯一可直接修改-state-位置">constructor （唯一可直接修改 state 位置）<a href="https://yanadev.github.io/react/react#constructor-%E5%94%AF%E4%B8%80%E5%8F%AF%E7%9B%B4%E6%8E%A5%E4%BF%AE%E6%94%B9-state-%E4%BD%8D%E7%BD%AE" class="hash-link" aria-label="constructor （唯一可直接修改 state 位置）的直接链接" title="constructor （唯一可直接修改 state 位置）的直接链接">​</a></h4>
<p>初始化内部状态，很少使用</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="getderivedstatefromprops表单控件获取默认值">getDerivedStateFromProps（表单控件获取默认值）<a href="https://yanadev.github.io/react/react#getderivedstatefromprops%E8%A1%A8%E5%8D%95%E6%8E%A7%E4%BB%B6%E8%8E%B7%E5%8F%96%E9%BB%98%E8%AE%A4%E5%80%BC" class="hash-link" aria-label="getDerivedStateFromProps（表单控件获取默认值）的直接链接" title="getDerivedStateFromProps（表单控件获取默认值）的直接链接">​</a></h4>
<p>当 state 需要从 props 中初始化的时候用到（不建议使用，维护 props-state 二者状态会增加复杂度）</p>
<p>每次 render 都会调用</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="componentdidmount获取外部资源">componentDidMount（获取外部资源）<a href="https://yanadev.github.io/react/react#componentdidmount%E8%8E%B7%E5%8F%96%E5%A4%96%E9%83%A8%E8%B5%84%E6%BA%90" class="hash-link" aria-label="componentDidMount（获取外部资源）的直接链接" title="componentDidMount（获取外部资源）的直接链接">​</a></h4>
<p>UI 渲染完成后调用，只执行一次</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="componentwillunmount资源释放">componentWillUnmount（资源释放）<a href="https://yanadev.github.io/react/react#componentwillunmount%E8%B5%84%E6%BA%90%E9%87%8A%E6%94%BE" class="hash-link" aria-label="componentWillUnmount（资源释放）的直接链接" title="componentWillUnmount（资源释放）的直接链接">​</a></h4>
<p>组件移除的时候被调用</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="getsnapshotbeforeupdate获取-render-之前的-dom-状态">getSnapshotBeforeUpdate（获取 render 之前的 DOM 状态）<a href="https://yanadev.github.io/react/react#getsnapshotbeforeupdate%E8%8E%B7%E5%8F%96-render-%E4%B9%8B%E5%89%8D%E7%9A%84-dom-%E7%8A%B6%E6%80%81" class="hash-link" aria-label="getSnapshotBeforeUpdate（获取 render 之前的 DOM 状态）的直接链接" title="getSnapshotBeforeUpdate（获取 render 之前的 DOM 状态）的直接链接">​</a></h4>
<p>render 之前调用，state 已经更新了</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="componentdidupdate页面根据-props-变化重获数据">componentDidUpdate（页面根据 props 变化重获数据）<a href="https://yanadev.github.io/react/react#componentdidupdate%E9%A1%B5%E9%9D%A2%E6%A0%B9%E6%8D%AE-props-%E5%8F%98%E5%8C%96%E9%87%8D%E8%8E%B7%E6%95%B0%E6%8D%AE" class="hash-link" aria-label="componentDidUpdate（页面根据 props 变化重获数据）的直接链接" title="componentDidUpdate（页面根据 props 变化重获数据）的直接链接">​</a></h4>
<p>每次 UI 更新都会调用</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="shouldcomponentupdate性能优化">shouldComponentUpdate（性能优化）<a href="https://yanadev.github.io/react/react#shouldcomponentupdate%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96" class="hash-link" aria-label="shouldComponentUpdate（性能优化）的直接链接" title="shouldComponentUpdate（性能优化）的直接链接">​</a></h4>
<p>Virtual DOM 是否会重新绘制</p>
<p>一般用 PureComponent 自动实现</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="virtual-dom-与-key-属性">Virtual DOM 与 key 属性<a href="https://yanadev.github.io/react/react#virtual-dom-%E4%B8%8E-key-%E5%B1%9E%E6%80%A7" class="hash-link" aria-label="Virtual DOM 与 key 属性的直接链接" title="Virtual DOM 与 key 属性的直接链接">​</a></h2>
<p>key 的作用是 为每一个元素赋予一个确定的标识，<strong>判断元素是新创建的还是被移动的，减少不必要的元素渲染</strong></p>
<ol>
<li>key 值唯一</li>
<li>不用随机值</li>
<li>使用 index 为 key 值对性能没有优化</li>
</ol>
<p><img decoding="async" loading="lazy" alt="image-20230908112616876" src="https://yanadev.github.io/assets/images/image-20230908112616876-923cce97d6b2e42cbcfb8ea66c497a1c.png" width="1070" height="1166" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="组件设计模式高阶组件和函数组件">组件设计模式：高阶组件和函数组件<a href="https://yanadev.github.io/react/react#%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%92%8C%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6" class="hash-link" aria-label="组件设计模式：高阶组件和函数组件的直接链接" title="组件设计模式：高阶组件和函数组件的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="高阶组件对业务组件的封装一般没有自己的-ui-展现">高阶组件：对业务组件的封装（一般没有自己的 UI 展现）<a href="https://yanadev.github.io/react/react#%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%E5%AF%B9%E4%B8%9A%E5%8A%A1%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E4%B8%80%E8%88%AC%E6%B2%A1%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84-ui-%E5%B1%95%E7%8E%B0" class="hash-link" aria-label="高阶组件：对业务组件的封装（一般没有自己的 UI 展现）的直接链接" title="高阶组件：对业务组件的封装（一般没有自己的 UI 展现）的直接链接">​</a></h3>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">const</span><span class="token plain"> </span><span class="token maybe-class-name" style="color:#4EC9B0">EnhancedComponent</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> higherOrderComponent（WrappedComponent）</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">// 接收组件参数，返回新的组件</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">import</span><span class="token plain"> </span><span class="token imports maybe-class-name" style="color:#4EC9B0">React</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'react'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">export</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">default</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">withTimer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token maybe-class-name" style="color:#4EC9B0">WrappedComponent</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">class</span><span class="token plain"> </span><span class="token class-name keyword" style="color:#C586C0">extends</span><span class="token plain"> </span><span class="token maybe-class-name" style="color:#4EC9B0">React</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access maybe-class-name" style="color:#4EC9B0">Component</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    state </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      time</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Date</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token function" style="color:rgb(220, 220, 170)">componentDidMount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">        </span><span class="token keyword" style="color:#C586C0">this</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">timeID</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">setInterval</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">this</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">tick</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token number" style="color:#B5CEA8">1000</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">componentWillUnmount</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token function" style="color:rgb(220, 220, 170)">clearInterval</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token keyword" style="color:#C586C0">this</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">timeID</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">tick</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">         </span><span class="token keyword" style="color:#C586C0">this</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">setState</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">             time</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Date</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token function" style="color:rgb(220, 220, 170)">render</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">         </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">WrappedComponent</span><span class="token tag" style="color:#569CD6"> </span><span class="token tag attr-name" style="color:rgb(156, 220, 254)">time</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(212, 212, 212)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token tag script language-javascript keyword" style="color:#C586C0">this</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token tag script language-javascript property-access" style="color:#D4D4D4">state</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token tag script language-javascript property-access" style="color:#D4D4D4">time</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag" style="color:#569CD6"> </span><span class="token tag spread punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token tag spread operator" style="color:rgb(212, 212, 212)">...</span><span class="token tag spread keyword" style="color:#C586C0">this</span><span class="token tag spread punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token tag spread property-access" style="color:#569CD6">props</span><span class="token tag spread punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">      }</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">    }</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">  }</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="函数作为子组件组件如何渲染由使用者决定------一种设计模式">函数作为子组件（组件如何渲染，由使用者决定）----- 一种设计模式<a href="https://yanadev.github.io/react/react#%E5%87%BD%E6%95%B0%E4%BD%9C%E4%B8%BA%E5%AD%90%E7%BB%84%E4%BB%B6%E7%BB%84%E4%BB%B6%E5%A6%82%E4%BD%95%E6%B8%B2%E6%9F%93%E7%94%B1%E4%BD%BF%E7%94%A8%E8%80%85%E5%86%B3%E5%AE%9A------%E4%B8%80%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" class="hash-link" aria-label="函数作为子组件（组件如何渲染，由使用者决定）----- 一种设计模式的直接链接" title="函数作为子组件（组件如何渲染，由使用者决定）----- 一种设计模式的直接链接">​</a></h3>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">MyComponent</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">extends</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">React</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access maybe-class-name" style="color:#4EC9B0">Component</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token function" style="color:rgb(220, 220, 170)">render</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">     </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag" style="color:#569CD6">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">       </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token keyword" style="color:#C586C0">this</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">props</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">children</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'Nate Wang'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain-text"> // 默认传递进来的是一个函数，传递值直接执行</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag" style="color:#569CD6">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">MyComponent</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag" style="color:#569CD6">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">name</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag" style="color:#569CD6">div</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text"></span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">MyComponent</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="新的-contextapi-及其使用场景共享状态comsumer-必须包裹在-provider-中">新的 ContextAPI 及其使用场景（共享状态，comsumer 必须包裹在 provider 中）<a href="https://yanadev.github.io/react/react#%E6%96%B0%E7%9A%84-contextapi-%E5%8F%8A%E5%85%B6%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E5%85%B1%E4%BA%AB%E7%8A%B6%E6%80%81comsumer-%E5%BF%85%E9%A1%BB%E5%8C%85%E8%A3%B9%E5%9C%A8-provider-%E4%B8%AD" class="hash-link" aria-label="新的 ContextAPI 及其使用场景（共享状态，comsumer 必须包裹在 provider 中）的直接链接" title="新的 ContextAPI 及其使用场景（共享状态，comsumer 必须包裹在 provider 中）的直接链接">​</a></h2>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">const</span><span class="token plain"> </span><span class="token maybe-class-name" style="color:#4EC9B0">ThemeContext</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token maybe-class-name" style="color:#4EC9B0">React</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">createContext</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'light'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">App</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">extends</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">React</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access maybe-class-name" style="color:#4EC9B0">Component</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token function" style="color:rgb(220, 220, 170)">render</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">     </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">ThemeContext.Provider</span><span class="token tag" style="color:#569CD6"> </span><span class="token tag attr-name" style="color:rgb(156, 220, 254)">value</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(212, 212, 212)">=</span><span class="token tag attr-value punctuation" style="color:rgb(212, 212, 212)">"</span><span class="token tag attr-value" style="color:rgb(206, 145, 120)">dark</span><span class="token tag attr-value punctuation" style="color:rgb(212, 212, 212)">"</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">        // 提供上下文给子组件使用</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">       </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">ThemedButton</span><span class="token tag" style="color:#569CD6"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">ThemeContext.Provider</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">ThemedButton</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">props</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token comment" style="color:rgb(106, 153, 85)">// 消费上下文</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">   </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">ThemeContext.Consumer</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">     </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain">theme </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">Button</span><span class="token tag" style="color:#569CD6"> </span><span class="token tag spread punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token tag spread operator" style="color:rgb(212, 212, 212)">...</span><span class="token tag spread" style="color:#569CD6">props</span><span class="token tag spread punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag" style="color:#569CD6"> </span><span class="token tag attr-name" style="color:rgb(156, 220, 254)">theme</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(212, 212, 212)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token tag script language-javascript" style="color:#D4D4D4">theme</span><span class="token tag script language-javascript punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">/&gt;</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&lt;/</span><span class="token tag class-name" style="color:rgb(78, 201, 176)">ThemeContext.Consumer</span><span class="token tag punctuation" style="color:rgb(212, 212, 212)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="脚手架构建工具">脚手架构建工具<a href="https://yanadev.github.io/react/react#%E8%84%9A%E6%89%8B%E6%9E%B6%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="脚手架构建工具的直接链接" title="脚手架构建工具的直接链接">​</a></h2>
<p><strong>creat-react-app</strong> 脚手架：babel + webpack config + testing + eslint</p>
<blockquote>
<p>适合新手学习</p>
</blockquote>
<p>rekit 脚手架：create-react-app + redux + react-router + less/scss + feature Oriented Architecture + Dedicated IDE</p>
<blockquote>
<p>快速开发大型项目</p>
</blockquote>
<p><strong>codesandbox.io</strong> 在线编程环境</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="打包与部署">打包与部署<a href="https://yanadev.github.io/react/react#%E6%89%93%E5%8C%85%E4%B8%8E%E9%83%A8%E7%BD%B2" class="hash-link" aria-label="打包与部署的直接链接" title="打包与部署的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="打包目的">打包目的<a href="https://yanadev.github.io/react/react#%E6%89%93%E5%8C%85%E7%9B%AE%E7%9A%84" class="hash-link" aria-label="打包目的的直接链接" title="打包目的的直接链接">​</a></h3>
<ol>
<li>编译 ES6 语法特性，编译 JSX</li>
<li>整合资源，如图片、less、sass 等</li>
<li>优化代码体积</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="打包注意">打包注意<a href="https://yanadev.github.io/react/react#%E6%89%93%E5%8C%85%E6%B3%A8%E6%84%8F" class="hash-link" aria-label="打包注意的直接链接" title="打包注意的直接链接">​</a></h3>
<ol>
<li>设置 nodejs 环境为 production</li>
<li>禁止开发时专用代码，如 logger</li>
<li>设置应用根路径 <strong><u>package 中的 homepage</u></strong></li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="redux">redux<a href="https://yanadev.github.io/react/react#redux" class="hash-link" aria-label="redux的直接链接" title="redux的直接链接">​</a></h2>
<p>react：state ---&gt; dom</p>
<p>Redux: store ---&gt; view</p>
<blockquote>
<p>使组件通信更加方便</p>
</blockquote>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="特性-1">特性<a href="https://yanadev.github.io/react/react#%E7%89%B9%E6%80%A7-1" class="hash-link" aria-label="特性的直接链接" title="特性的直接链接">​</a></h3>
<ol>
<li>Single Source of Truth 唯一状态来源</li>
<li>state + action = new state 可预测性</li>
<li>纯函数更新 store</li>
</ol>
<p><img decoding="async" loading="lazy" alt="image-20230911114420172" src="https://yanadev.github.io/assets/images/image-20230911114420172-9e07a9805ada41f15ed2660827603f47.png" width="524" height="630" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="理解-store">理解 Store<a href="https://yanadev.github.io/react/react#%E7%90%86%E8%A7%A3-store" class="hash-link" aria-label="理解 Store的直接链接" title="理解 Store的直接链接">​</a></h3>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">const</span><span class="token plain"> store </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">createStore</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">reducer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">## reducer 处理函数</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>store 有三个方法：</p>
<ol>
<li>getState() 获取数据</li>
<li>dispatch(action) 传递</li>
<li>subscribe(listener) 监听</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="理解-action描述行为">理解 Action（描述行为）<a href="https://yanadev.github.io/react/react#%E7%90%86%E8%A7%A3-action%E6%8F%8F%E8%BF%B0%E8%A1%8C%E4%B8%BA" class="hash-link" aria-label="理解 Action（描述行为）的直接链接" title="理解 Action（描述行为）的直接链接">​</a></h3>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">   type</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token constant" style="color:#4FC1FF">ADD_TODO</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    text</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'Build my first Redux app'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="理解-reducer触发更新-------返回一个新的-store">理解 Reducer(触发更新 ----- 返回一个新的 store)<a href="https://yanadev.github.io/react/react#%E7%90%86%E8%A7%A3-reducer%E8%A7%A6%E5%8F%91%E6%9B%B4%E6%96%B0-------%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84-store" class="hash-link" aria-label="理解 Reducer(触发更新 ----- 返回一个新的 store)的直接链接" title="理解 Reducer(触发更新 ----- 返回一个新的 store)的直接链接">​</a></h3>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">todoApp</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> initialState</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> action</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#C586C0">switch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">action</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">case</span><span class="token plain"> </span><span class="token constant" style="color:#4FC1FF">ADD_TODO</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">       </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(78, 201, 176)">Object</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">assign</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">          todos</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">            </span><span class="token spread operator" style="color:rgb(212, 212, 212)">...</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">todos</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">              text</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> action</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">text</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">              completed</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token boolean" style="color:#569CD6">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">            </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">default</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">       </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> state</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img decoding="async" loading="lazy" alt="image-20230911115053127" src="https://yanadev.github.io/assets/images/image-20230911115053127-01b22cd1e1d2d21e9d66470b79ffc566.png" width="2030" height="1020" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="工具方法">工具方法<a href="https://yanadev.github.io/react/react#%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95" class="hash-link" aria-label="工具方法的直接链接" title="工具方法的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="理解-combinereducers方便管理多个-reducer">理解 combineReducers(方便管理多个 reducer)<a href="https://yanadev.github.io/react/react#%E7%90%86%E8%A7%A3-combinereducers%E6%96%B9%E4%BE%BF%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA-reducer" class="hash-link" aria-label="理解 combineReducers(方便管理多个 reducer)的直接链接" title="理解 combineReducers(方便管理多个 reducer)的直接链接">​</a></h4>
<p>将多个 reducer 整合到一个文件中统一管理</p>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token imports"> combineReducers </span><span class="token imports punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'redux'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">import</span><span class="token plain"> </span><span class="token imports">todos</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'./todos'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">import</span><span class="token plain"> </span><span class="token imports">counter</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'./counter'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">export</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">default</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">combineReducers</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  todos</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  counter</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token plain">## todos</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">export</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">default</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">todos</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> action</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#C586C0">switch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">action</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'ADD_TODO'</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">concat</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token plain">action</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">text</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">default</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> state</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">## counter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">ts</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">export</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">default</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">counter</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token number" style="color:#B5CEA8">0</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> action</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#C586C0">switch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">action</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'INCREMENT'</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> state </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:#B5CEA8">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">case</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'DECREMENT'</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> state </span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token number" style="color:#B5CEA8">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">default</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> state</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="理解-bindactioncreators将繁复的-dispatch-封装在一个函数里调用">理解 bindActionCreators(将繁复的 dispatch 封装在一个函数里调用)<a href="https://yanadev.github.io/react/react#%E7%90%86%E8%A7%A3-bindactioncreators%E5%B0%86%E7%B9%81%E5%A4%8D%E7%9A%84-dispatch-%E5%B0%81%E8%A3%85%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%E9%87%8C%E8%B0%83%E7%94%A8" class="hash-link" aria-label="理解 bindActionCreators(将繁复的 dispatch 封装在一个函数里调用)的直接链接" title="理解 bindActionCreators(将繁复的 dispatch 封装在一个函数里调用)的直接链接">​</a></h4>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token plain">## 原本的使用逻辑</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">store</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">dispatch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token function" style="color:rgb(220, 220, 170)">plusOne</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)">// 每次需要触发该 action 都得写这样一句</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">## 进行一层封装</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">plusOne </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">bindActionCreators</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">plusOne</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> store</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">dispatch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token function" style="color:rgb(220, 220, 170)">plusOne</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(106, 153, 85)">// 此后需要调用该 action 的时候只需要执行封装好的函数即可</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="在-react-中使用-redux">在 react 中使用 redux<a href="https://yanadev.github.io/react/react#%E5%9C%A8-react-%E4%B8%AD%E4%BD%BF%E7%94%A8-redux" class="hash-link" aria-label="在 react 中使用 redux的直接链接" title="在 react 中使用 redux的直接链接">​</a></h3>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="实现原理hoc">实现原理（HOC）<a href="https://yanadev.github.io/react/react#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86hoc" class="hash-link" aria-label="实现原理（HOC）的直接链接" title="实现原理（HOC）的直接链接">​</a></h3>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token imports"> connect </span><span class="token imports punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'react-redux'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">class</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">SidePanel</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">extends</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(78, 201, 176)">Component</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token comment" style="color:rgb(106, 153, 85)">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">mapStatetoProps</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    nextgen</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">nextgen</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    router</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">router</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">mapDispatchToProps</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">dispatch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    actions</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">bindActionCreators</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token spread operator" style="color:rgb(212, 212, 212)">...</span><span class="token plain">actions</span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> dispatch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">export</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">default</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">connect</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">mapStateToProps</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> mapDispatchToProps</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token maybe-class-name" style="color:#4EC9B0">SidePanel</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p><img decoding="async" loading="lazy" alt="image-20230911135817126" src="https://yanadev.github.io/assets/images/image-20230911135817126-24c4b84f9f74da57eabfcde7eff2de11.png" width="1560" height="926" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="理解异步-action中间件action-的设计模式">理解异步 Action、中间件（action 的设计模式）<a href="https://yanadev.github.io/react/react#%E7%90%86%E8%A7%A3%E5%BC%82%E6%AD%A5-action%E4%B8%AD%E9%97%B4%E4%BB%B6action-%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" class="hash-link" aria-label="理解异步 Action、中间件（action 的设计模式）的直接链接" title="理解异步 Action、中间件（action 的设计模式）的直接链接">​</a></h3>
<p>异步 action：发送 ajax 请求</p>
<p><img decoding="async" loading="lazy" alt="image-20230911140354924" src="https://yanadev.github.io/assets/images/image-20230911140354924-29e833d5399b37be6b7618b6b2102ad5.png" width="2026" height="1012" class="img_ev3q"></p>
<p>redux 中间件（middleware）：截获 action ，发出 action</p>
<p><strong>注意：</strong></p>
<ol>
<li>异步 action 不是特殊 action，是多个同步 action 的组合使用</li>
<li>中间件在 dispatcher 中截获 action 做特殊处理</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="如何组织-action-和-reducer">如何组织 action 和 reducer<a href="https://yanadev.github.io/react/react#%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87-action-%E5%92%8C-reducer" class="hash-link" aria-label="如何组织 action 和 reducer的直接链接" title="如何组织 action 和 reducer的直接链接">​</a></h3>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="标准-redux-action-导致的问题">标准 redux action 导致的问题<a href="https://yanadev.github.io/react/react#%E6%A0%87%E5%87%86-redux-action-%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98" class="hash-link" aria-label="标准 redux action 导致的问题的直接链接" title="标准 redux action 导致的问题的直接链接">​</a></h4>
<ol>
<li>所有 action 都在一个文件里，会无限扩展</li>
<li>action、reducer 分开，实现业务逻辑的时候需要来回切换</li>
<li>系统中有哪一些 action 不够直观</li>
</ol>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="新的方式单个-action-和-reducer-放在同一文件">新的方式：单个 action 和 reducer 放在同一文件<a href="https://yanadev.github.io/react/react#%E6%96%B0%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8D%95%E4%B8%AA-action-%E5%92%8C-reducer-%E6%94%BE%E5%9C%A8%E5%90%8C%E4%B8%80%E6%96%87%E4%BB%B6" class="hash-link" aria-label="新的方式：单个 action 和 reducer 放在同一文件的直接链接" title="新的方式：单个 action 和 reducer 放在同一文件的直接链接">​</a></h4>
<p><img decoding="async" loading="lazy" alt="image-20230911141406828" src="https://yanadev.github.io/assets/images/image-20230911141406828-8843c07c14ed4d1752aa2ab05a445519.png" width="1634" height="640" class="img_ev3q"></p>
<ol>
<li>易于开发：不用在 action 和 reducer 文件来回切换</li>
<li>易于维护：每个 action 文件都很小，易于理解</li>
<li>易于测试：业务逻辑只需对应一个测试文件</li>
<li>易于理解：文件名就是 action 名</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> </span><span class="token constant" style="color:#4FC1FF">COUNTER_PLUS_ONE</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'./constants'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">export</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">counterPlusOne</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    type</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token constant" style="color:#4FC1FF">COUNTER_PLUS_ONE</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">export</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">reducer</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> action</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token keyword" style="color:#C586C0">switch</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">acrion</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">type</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">case</span><span class="token plain"> </span><span class="token constant" style="color:#4FC1FF">COUNTER_PLUS_ONE</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">        </span><span class="token spread operator" style="color:rgb(212, 212, 212)">...</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">        count</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">count</span><span class="token plain"> </span><span class="token operator" style="color:rgb(212, 212, 212)">+</span><span class="token plain"> </span><span class="token number" style="color:#B5CEA8">1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">    </span><span class="token keyword" style="color:#C586C0">default</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">      </span><span class="token keyword" style="color:#C586C0">return</span><span class="token plain"> state</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token comment" style="color:rgb(106, 153, 85)">// counterPlusOne.js</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="操作不可变数据-immutable-data">操作不可变数据 immutable data<a href="https://yanadev.github.io/react/react#%E6%93%8D%E4%BD%9C%E4%B8%8D%E5%8F%AF%E5%8F%98%E6%95%B0%E6%8D%AE-immutable-data" class="hash-link" aria-label="操作不可变数据 immutable data的直接链接" title="操作不可变数据 immutable data的直接链接">​</a></h3>
<p>为什么需要不可变数据？</p>
<ol>
<li>性能优化</li>
<li>易于调试和跟踪</li>
<li>易于推测</li>
</ol>
<p>如何操作不可变数据</p>
<ol>
<li>原生写法：扩展符 ...、Object.assign</li>
<li>immutability-helper</li>
<li>immer（适合应用程序较小的场景）</li>
</ol>
<div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token keyword" style="color:#C586C0">import</span><span class="token plain"> </span><span class="token imports">update</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'immutability-helper'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">const</span><span class="token plain"> state </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  filter</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token string" style="color:rgb(206, 145, 120)">'completed'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  todos</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'Learn React'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">const</span><span class="token plain"> newState </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">update</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> todos</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"> $plus</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'Learn React'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token operator" style="color:rgb(212, 212, 212)">--</span><span class="token operator" style="color:rgb(212, 212, 212)">--</span><span class="token operator" style="color:rgb(212, 212, 212)">--</span><span class="token operator" style="color:rgb(212, 212, 212)">--</span><span class="token operator" style="color:rgb(212, 212, 212)">--</span><span class="token operator" style="color:rgb(212, 212, 212)">-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">import</span><span class="token plain"> </span><span class="token imports">produce</span><span class="token plain"> </span><span class="token keyword" style="color:#C586C0">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(206, 145, 120)">'immer'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">const</span><span class="token plain"> state </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  filter</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token string" style="color:rgb(206, 145, 120)">'completed'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  todos</span><span class="token operator" style="color:rgb(212, 212, 212)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">[</span><span class="token string" style="color:rgb(206, 145, 120)">'Learn React'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token keyword" style="color:#C586C0">const</span><span class="token plain"> newState </span><span class="token operator" style="color:rgb(212, 212, 212)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(220, 220, 170)">produce</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token plain">state</span><span class="token punctuation" style="color:rgb(212, 212, 212)">,</span><span class="token plain"> draftState </span><span class="token arrow operator" style="color:rgb(212, 212, 212)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(212, 212, 212)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">  draftState</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token property-access">todos</span><span class="token punctuation" style="color:rgb(212, 212, 212)">.</span><span class="token method function property-access" style="color:rgb(220, 220, 170)">push</span><span class="token punctuation" style="color:rgb(212, 212, 212)">(</span><span class="token string" style="color:rgb(206, 145, 120)">'Learn Redux'</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain"></span><span class="token punctuation" style="color:rgb(212, 212, 212)">}</span><span class="token punctuation" style="color:rgb(212, 212, 212)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="react-router-路由">React-router 路由<a href="https://yanadev.github.io/react/react#react-router-%E8%B7%AF%E7%94%B1" class="hash-link" aria-label="React-router 路由的直接链接" title="React-router 路由的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="为什么需要路由">为什么需要路由？<a href="https://yanadev.github.io/react/react#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E8%B7%AF%E7%94%B1" class="hash-link" aria-label="为什么需要路由？的直接链接" title="为什么需要路由？的直接链接">​</a></h3>
<ol>
<li>单页应用需要进行页面切换</li>
<li>通过 URL 可定位页面</li>
<li>更有语意的组织资源</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="react-router-特性">React Router 特性<a href="https://yanadev.github.io/react/react#react-router-%E7%89%B9%E6%80%A7" class="hash-link" aria-label="React Router 特性的直接链接" title="React Router 特性的直接链接">​</a></h3>
<ol>
<li>声明式路由定义</li>
<li>动态路由</li>
<li>三种实现方式<!-- -->
<ul>
<li>URL 路径</li>
<li>hash 路由</li>
<li>内存路由</li>
</ul>
</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="基于路由配置进行资源组织">基于路由配置进行资源组织<a href="https://yanadev.github.io/react/react#%E5%9F%BA%E4%BA%8E%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE%E8%BF%9B%E8%A1%8C%E8%B5%84%E6%BA%90%E7%BB%84%E7%BB%87" class="hash-link" aria-label="基于路由配置进行资源组织的直接链接" title="基于路由配置进行资源组织的直接链接">​</a></h3>
<p>实现业务逻辑的松耦合</p>
<p>易于扩展、重构和维护</p>
<p>路由层面实现 lazyLoad</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="选择-ui-库的考虑因素">选择 UI 库的考虑因素<a href="https://yanadev.github.io/react/react#%E9%80%89%E6%8B%A9-ui-%E5%BA%93%E7%9A%84%E8%80%83%E8%99%91%E5%9B%A0%E7%B4%A0" class="hash-link" aria-label="选择 UI 库的考虑因素的直接链接" title="选择 UI 库的考虑因素的直接链接">​</a></h2>
<ol>
<li>组件库是否齐全</li>
<li>样式风格是否符合业务需求</li>
<li>API 设计是否便捷和灵活</li>
<li>技术支持是否完善</li>
<li>开发是否活跃</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="同构应用ssr">同构应用（SSR）<a href="https://yanadev.github.io/react/react#%E5%90%8C%E6%9E%84%E5%BA%94%E7%94%A8ssr" class="hash-link" aria-label="同构应用（SSR）的直接链接" title="同构应用（SSR）的直接链接">​</a></h2>
<p><img decoding="async" loading="lazy" alt="image-20230911153510174" src="https://yanadev.github.io/assets/images/image-20230911153510174-ba92c8d1c6f1a3995e109712cd3ea98a.png" width="1320" height="1010" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="nextjs-实现同构应用">next.js 实现同构应用<a href="https://yanadev.github.io/react/react#nextjs-%E5%AE%9E%E7%8E%B0%E5%90%8C%E6%9E%84%E5%BA%94%E7%94%A8" class="hash-link" aria-label="next.js 实现同构应用的直接链接" title="next.js 实现同构应用的直接链接">​</a></h3>
<p>next 项目约定：</p>
<ol>
<li>页面就是 pages 目录下的一个组件（pages 目录对应路由）</li>
<li>static 映射静态文件</li>
<li>page 具有静态方法 getInitialProps</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用-jestenzyme-等工具进行单元测试">使用 Jest、Enzyme 等工具进行单元测试<a href="https://yanadev.github.io/react/react#%E4%BD%BF%E7%94%A8-jestenzyme-%E7%AD%89%E5%B7%A5%E5%85%B7%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95" class="hash-link" aria-label="使用 Jest、Enzyme 等工具进行单元测试的直接链接" title="使用 Jest、Enzyme 等工具进行单元测试的直接链接">​</a></h2>
<ol>
<li>react 应用很少需要访问浏览器 API</li>
<li>虚拟 DOM 可以在 nodejs 环境运行和测试</li>
<li>redux 隔离了状态管理、纯数据层单独测试</li>
</ol>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="单元测试涉及到的工具">单元测试涉及到的工具<a href="https://yanadev.github.io/react/react#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%B6%89%E5%8F%8A%E5%88%B0%E7%9A%84%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="单元测试涉及到的工具的直接链接" title="单元测试涉及到的工具的直接链接">​</a></h3>
<ol>
<li>Jest Facebook 开源的 JS 单元测试框架</li>
<li>JS DOM 浏览器环境的 NodeJS 模拟</li>
<li>Enzyme react 组件渲染和测试</li>
<li>nock 模拟 HTTP 请求</li>
<li>sinon 函数模拟和调用跟踪</li>
<li>istanbul 单元测试覆盖率</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="常用开发调试工具">常用开发调试工具<a href="https://yanadev.github.io/react/react#%E5%B8%B8%E7%94%A8%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7" class="hash-link" aria-label="常用开发调试工具的直接链接" title="常用开发调试工具的直接链接">​</a></h2>
<ol>
<li>eslint（airbnb）</li>
<li>prettier 代码格式化，保持风格一致</li>
<li>React Dev Tool</li>
<li>Redux Dev Tool</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前端项目的理想架构">前端项目的理想架构<a href="https://yanadev.github.io/react/react#%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%90%86%E6%83%B3%E6%9E%B6%E6%9E%84" class="hash-link" aria-label="前端项目的理想架构的直接链接" title="前端项目的理想架构的直接链接">​</a></h2>
<ol>
<li>可维护</li>
<li>可扩展</li>
<li>可测试</li>
<li>易开发</li>
<li>易构建</li>
</ol>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="拆分复杂度">拆分复杂度<a href="https://yanadev.github.io/react/react#%E6%8B%86%E5%88%86%E5%A4%8D%E6%9D%82%E5%BA%A6" class="hash-link" aria-label="拆分复杂度的直接链接" title="拆分复杂度的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="按照领域模型feature组织代码">按照领域模型（feature）组织代码<a href="https://yanadev.github.io/react/react#%E6%8C%89%E7%85%A7%E9%A2%86%E5%9F%9F%E6%A8%A1%E5%9E%8Bfeature%E7%BB%84%E7%BB%87%E4%BB%A3%E7%A0%81" class="hash-link" aria-label="按照领域模型（feature）组织代码的直接链接" title="按照领域模型（feature）组织代码的直接链接">​</a></h3>
<u>将<strong>业务逻辑</strong>拆分成<strong>高内聚松耦合</strong>的模块</u>
<ol>
<li>初期：规模小、模块关系清晰</li>
<li>发展：逐渐复杂，添加了很多组件</li>
<li>收尾：文件结构、模块依赖错综复杂</li>
</ol>
<p><img decoding="async" loading="lazy" alt="image-20230911155842103" src="https://yanadev.github.io/assets/images/image-20230911155842103-798f18b0b4014b0e7efe14020637cec5.png" width="1116" height="1050" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="如何组织-componentactionreducer">如何组织 component、action、reducer<a href="https://yanadev.github.io/react/react#%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87-componentactionreducer" class="hash-link" aria-label="如何组织 component、action、reducer的直接链接" title="如何组织 component、action、reducer的直接链接">​</a></h3>
<ol>
<li>按照 feature 组织源文件</li>
<li>组件和样式文件同一级</li>
<li>redux 单独文件夹</li>
<li>单元测试保持同样的目录结构放在 test 文件夹中</li>
</ol>
<p><img decoding="async" loading="lazy" alt="image-20230911160424939" src="https://yanadev.github.io/assets/images/image-20230911160424939-002d9b32815d73744a527b38f854ffe3.png" width="488" height="466" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" alt="image-20230911160537070" src="https://yanadev.github.io/assets/images/image-20230911160537070-e352d0df3e61ad3d24e506df6d36278c.png" width="1238" height="814" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="如何组织-react-router-的路由配置">如何组织 react router 的路由配置<a href="https://yanadev.github.io/react/react#%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87-react-router-%E7%9A%84%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE" class="hash-link" aria-label="如何组织 react router 的路由配置的直接链接" title="如何组织 react router 的路由配置的直接链接">​</a></h3>
<p>建议：使用 JSON 定义顶层路由</p>
<p><img decoding="async" loading="lazy" alt="image-20230911160721394" src="https://yanadev.github.io/assets/images/image-20230911160721394-cc1c8d17da59f93bb7aff32828f918fc.png" width="1824" height="506" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" alt="image-20230911160803857" src="https://yanadev.github.io/assets/images/image-20230911160803857-77ce2799bdf879aa0ab92ca7ee31d3c8.png" width="1520" height="858" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" alt="image-20230911160648961" src="https://yanadev.github.io/assets/images/image-20230911160648961-976a3e5d7ac9f797d3537bcf34e66f07.png" width="1536" height="900" class="img_ev3q"></p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="rekit-构建项目">rekit 构建项目<a href="https://yanadev.github.io/react/react#rekit-%E6%9E%84%E5%BB%BA%E9%A1%B9%E7%9B%AE" class="hash-link" aria-label="rekit 构建项目的直接链接" title="rekit 构建项目的直接链接">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="安装依赖">安装依赖<a href="https://yanadev.github.io/react/react#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96" class="hash-link" aria-label="安装依赖的直接链接" title="安装依赖的直接链接">​</a></h3>
<div class="language-zsh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-zsh codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token plain">npm install -g rekit  ## Install Rekit CLI</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">npm install -g rekit-studio  ## Install Rekit Studio</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="创建项目">创建项目<a href="https://yanadev.github.io/react/react#%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE" class="hash-link" aria-label="创建项目的直接链接" title="创建项目的直接链接">​</a></h3>
<div class="language-zsh codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#D4D4D4;--prism-background-color:#212121"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-zsh codeBlock_bY9V thin-scrollbar" style="color:#D4D4D4;background-color:#212121"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#D4D4D4"><span class="token plain">rekit create &lt;app-name&gt; [--sass]</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">## 默认是 less</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">cd app-name</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">npm install</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">## 启动项目</span><br></span><span class="token-line" style="color:#D4D4D4"><span class="token plain">rekit-studio -p 3040</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="复制代码到剪贴板" title="复制" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="table-实践">Table 实践<a href="https://yanadev.github.io/react/react#table-%E5%AE%9E%E8%B7%B5" class="hash-link" aria-label="Table 实践的直接链接" title="Table 实践的直接链接">​</a></h3>
<p><img decoding="async" loading="lazy" alt="image-20230913101206250" src="https://yanadev.github.io/assets/images/image-20230913101206250-96b204a0f2b334e8eb2000e07c4df0af.png" width="1286" height="950" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" alt="image-20230913101328858" src="https://yanadev.github.io/assets/images/image-20230913101328858-7d329f0bb6b4683f3d8ae300a01efa2b.png" width="1476" height="898" class="img_ev3q"></p>
<p><img decoding="async" loading="lazy" alt="image-20230913104307789" src="https://yanadev.github.io/assets/images/image-20230913104307789-8f5b52f822ed01e6143d8c4091633e63.png" width="1358" height="752" class="img_ev3q"></p>]]></content:encoded>
            <category>React</category>
            <category>实战</category>
        </item>
    </channel>
</rss>